#!/usr/bin/env node
var path = require("path");
var fs = require("fs");
var exec = require("child_process").exec;

var program = require('commander')
  .version('0.0.1')
  .usage('[options]')
  .parse(process.argv);

watchFile = function(filename, callback){
    fs.watch(filename, function(event) {
        if (event === 'change') callback(filename);
    });
}




var file = program.args[0];

if(file) file = path.join(process.cwd(), file);

var server = require("../server.js");

var io = require('socket.io')(server);

var openBrowser = function (target, callback){
    var map = {
      'darwin': 'open',
      'win32': 'start '
    }
    var opener = map[process.platform] || 'xdg-open'  
    exec( opener  + " " + target ,  callback);
}

// unsercore throttle
var throttle = function(func, wait, immediate) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    var later = function() {
        previous = new Date();
        timeout = null;
        result = func.apply(context, args);
    };
    return function() {
        var now = new Date();
        if (!previous && immediate === false){
            previous = now;
        } 
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
        } else if (!timeout) {
            timeout = setTimeout(later, remaining);
        }
        return result;
    };
};


// socket.io
if(file){
  io.on('connection', function(socket){
    var fromLocal = true;
    function onFileChanged(file){
      fs.readFile(file, "utf8", function(err, content){
        if(err) return;
        socket.emit("change", content);
      })
    }

    socket.on('change', function(content){

      if(!fromLocal){
        try{
          fs.writeFileSync(file, content, "utf8");
        }catch(e){

        }
      }else{
        fromLocal = false;
      }
    });

    fs.readFile(file, "utf8", function(err, content){
      if(err) return;
      socket.emit("change", content);
      watchFile(file, onFileChanged, 200);
    })

    
    server.socket = socket;
  });
}



server.listen(3000, function(){
  console.log('listening on *:3000');
  openBrowser("http://localhost:3000" ,function(){})
});






